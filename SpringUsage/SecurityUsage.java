package SpringUsage;

public class SecurityUsage {
    //Spring Security
    //在Web应用中隐含有“面向连接”和“保持状态”两个含义，同时也指代了Web服务器与客户端之间进行状态保持的解决方案。
    //在这样的单体架构中，由于所有的用户请求都是由这个唯一的服务器进行响应处理，所以只要把保存了用户信息和状态的Session对象，存放在应用服务器内存里，就能轻松地达到保持用户状态的目的。
    //使用Spring Security保护Web应用安全
    //使用预先构建的安全框架，同时提供扩展点，易于将自定义的安全代码添加到框架里。更为可靠。
    //安全性要求
    //身份验证
    //用户向目标应用程序提供自己的身份标识
    //系统凭借可用可信的凭据信息对身份标识进行验证
    //授权
    //负责处理通过身份验证后，哪些操作可以执行，哪些不能执行
    //优势
    //不同的目标Web容器通用
    //热插拔的身份认证和授权功能
    //自定义和扩展的安全都可以捆绑为war文件，部署到不同的应用服务器中
    //功能
    //支持多种身份认证
    //基于登陆表单的身份认证
    //X509证书的身份认证
    //LDAP身份认证
    //Windows身份认证
    //身份认证方法与用户信息库的访问之间完全独立
    //集成多种单点登录解决方案
    //CAS
    //OAuth
    //Spring只处理授权部分
    //提供匿名身份验证或来宾身份登陆
    //提供有效的身份验证令牌
    //内置Remember-me支持，关闭浏览器重新打开自动登录
    //getRemoteUser方法和isUserInRole方法，提供底层身份验证信息
    //可以强制用户仅使用安全的HTTP访问应用程序
    //SSL和HTTPS
    //支持在用户信息库保存经过加密的密码
    //用户密码对开发人员或数据库管理员不公开
    //使用护照组织使用全系统或特定用户属性Salt机制进行字典攻击
    //跟踪用户会话，提供对会话固定攻击的内置保护，限制不同位置用户的最大并发访问数量
    //对URL资源、服务方法调用和域对象分别进行控制访问，可以在运行时向已登录用户添加角色
    //配置使用
    //Servlet过滤器
    //Spring Security完全依靠Servlet过滤器来完成适当的功能
    //Servlet过滤器被用来拦截请求并将其转换为Web资源
    //可以完全更改响应，例如重定向
    //安全性过滤器的配置顺序
    //ChannelProcessingFilter
    //检查Web请求的HTTP方案
    //被要求的是HTTPS，则将HTTP重定向到HTTPS
    //ConcurrentSessionFilter
    //执行并发用户管理
    //SecurityContextPersistenceFilter
    //在HttpSession中存储请求之间的身份验证令牌
    //并在下一个请求开始之前放到SecurityContextHolder中
    //以便请求处理期间可以使用该身验证令牌
    //LogoutFilter
    //执行操作注销URL，清除身份验证令牌，使HttpSession无效，最后将用户重定向到注销成功URL
    //UsernamePasswordAuthenticationFilter
    //身份认证
    //具体实现需要进行相关配置
    //委托给AuthenticationManager
    //SecurityContextHolderAwareRequestFilter
    //包含了当前的HttpServletRequest对象
    //以便getRemoteUser（）和isUserInRole()方法调用可以返回可用的信息
    //RememberMeAuthenticationFilter
    //对从客户端发来的Cookie进行检查，存在Remember-me Cookie并且有效，则执行remember-me身份认证
    //AnonymousAuthenticationFilter
    //没有有效身份验证令牌，创建来宾身份验证令牌，添加到SecurityContext中
    //ExceptionTranslationFilter
    //将安全异常映射到不同的URL
    //发送特定的安全异常时将用户请求重定向到目标Web页面
    //FilterSecurityInterceptor
    //最后一个过滤器
    //对Web资源的授权，仅允许访问所请求的安全Web资源
    //将授权操作委托给AccessDecisionManager
    //Spring Security的基础构建基块
    //基本元素与实现流程
    //UserDetails
    //对用户信息库的访问进行了抽象
    //实现类
    //User
    //系统中特定用户的数据
    //在身份验证过程中会使用
    //GrantedAuthority
    //将分配给用户的角色抽象为对安全资源的授予
    //实现类
    //SimpleGrantedAuthority
    //框架中GrantedAuthority的一个简单实现
    //Authentication
    //表示身份验证信息，该接口在身份验证过程中被创建，在请求处理期间保存在SecurityContext对象中
    //每种实现对应框架中可用的身份验证方法
    //UsernamePasswordAuthenticationToken
    //登陆表单身份验证
    //SecurityContext
    //保存Authentication令牌
    //抽象为一个简单的数据容器
    //SecurityContext保存在HttpSession中
    //DaoAuthenticationProvider
    //授权
    //UsernamePasswordAuthenticationFilter
    //创建令牌
    //SecurityContextPresistenceFilter
    //检查HttpSession是否包含一个SecurityContext
    //包含则将其放入SecurityContextHolder
    //请求结束后，SecurityContextPersistenceFilter将当前SecurityContext存储到HttpSession，然后清除SecurityContextHolder
    //SecurityContextHolder
    //使用ThreadLocal变量保存SecurityContext
    //任何代码块都可以非常容易地访问当前身份验证令牌，而不必通过方法调用传入。
    //对用户进行身份验证
    //不成功的登陆流程
    //成功的登录流程
    //匿名身份验证
    //自定义登录界面
    //注销过程
    //使用JDBC访问UserDetails
    //对密码进行加密
    //Remember-Me支持
    //用户会话管理
    //基本身份验证
    //授权Web请求和服务方法调用
}
